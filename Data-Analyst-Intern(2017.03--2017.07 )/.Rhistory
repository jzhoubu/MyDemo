bar=function(data,var,y,plot=T){
data=data%>%data.table
var=data[[var]]
y1=data[[y]]
a=cbind(var,y1)%>%data.table
df=a[,.N,by=.(var,y1)]
df$var[is.na(df$var)]=-99999
df$var=factor(df$var)
levels(df$var)=df$var%>%levels%>%as.numeric%>%sort
df=df[order(y1,var)]
if(plot==T){
ggplot(df1,aes(x=var,y=N,fill=factor(y1)))+
geom_bar(stat='identity')
}
else{
good=df[y1==0]
bad=df[y1==1]
df1=merge(good,bad,all=T,by='var')
df1=mutate(df1,'good%'=N.x/(N.x+N.y))
return(df1)
}
}
bar(data1,"stage_count","y",plot=T)
bar=function(data,var,y,plot=T){
data=data%>%data.table
var=data[[var]]
y1=data[[y]]
a=cbind(var,y1)%>%data.table
df=a[,.N,by=.(var,y1)]
df$var[is.na(df$var)]=-99999
df$var=factor(df$var)
levels(df$var)=df$var%>%levels%>%as.numeric%>%sort
df=df[order(y1,var)]
if(plot==T){
ggplot(df,aes(x=var,y=N,fill=factor(y1)))+
geom_bar(stat='identity')
}
else{
good=df[y1==0]
bad=df[y1==1]
df1=merge(good,bad,all=T,by='var')
df1=mutate(df1,'good%'=N.x/(N.x+N.y))
return(df1)
}
}
bar(data1,"stage_count","y",plot=T)
levels(df$var)=sub(x=levels(df$var),"-99999","NA")
bar=function(data,var,y,plot=T){
data=data%>%data.table
var=data[[var]]
y1=data[[y]]
a=cbind(var,y1)%>%data.table
df=a[,.N,by=.(var,y1)]
df$var[is.na(df$var)]=-99999
df$var=factor(df$var)
levels(df$var)=df$var%>%levels%>%as.numeric%>%sort
df=df[order(y1,var)]
levels(df$var)=sub(x=levels(df$var),"-99999","NA")
if(plot==T){
ggplot(df,aes(x=var,y=N,fill=factor(y1)))+
geom_bar(stat='identity')
}
else{
good=df[y1==0]
bad=df[y1==1]
df1=merge(good,bad,all=T,by='var')
df1=mutate(df1,'good%'=N.x/(N.x+N.y))
return(df1)
}
}
bar(data1,"stage_count","y",plot=T)
###########################################################
#    Powered by ZJW
#
# 用来描绘变量var对于标签y的数量分布
# 会得到一个柱状图，X是var的levels,Y是数目，fill是labels
#
###########################################################
library(ggplot2)
library(data.table)
bar=function(data,var,y,plot=T){
data=data%>%data.table
var=data[[var]]
y1=data[[y]]
a=cbind(var,y1)%>%data.table
df=a[,.N,by=.(var,y1)]
df$var[is.na(df$var)]=-99999
df$var=factor(df$var)
levels(df$var)=df$var%>%levels%>%as.numeric%>%sort
df=df[order(y1,var)]
levels(df$var)=sub(x=levels(df$var),"-99999","NA")
if(plot==T){
ggplot(df,aes(x=var,y=N,fill=factor(y1)))+
geom_bar(stat='identity')
}
else{
good=df[y1==0]
bad=df[y1==1]
df1=merge(good,bad,all=T,by='var')
df1=mutate(df1,'good%'=N.x/(N.x+N.y))
return(df1)
}
}
###########################################################
#    Powered by ZJW
#
# 用来描绘变量var对于标签y的数量分布
# 会得到一个柱状图，X是var的levels,Y是数目，fill是labels
#
###########################################################
library(ggplot2)
library(data.table)
bar=function(data,var,y,plot=T){
data=data%>%data.table
var=data[[var]]
y1=data[[y]]
a=cbind(var,y1)%>%data.table
df=a[,.N,by=.(var,y1)]
df$var[is.na(df$var)]=-99999
df$var=factor(df$var)
levels(df$var)=df$var%>%levels%>%as.numeric%>%sort
df=df[order(y1,var)]
levels(df$var)=sub(x=levels(df$var),"-99999","NA")
if(plot==T){
ggplot(df,aes(x=var,y=N,fill=factor(y1)))+
geom_bar(stat='identity')
}
else{
good=df[y1==0]
bad=df[y1==1]
df1=merge(good,bad,all=T,by='var')
df1=mutate(df1,'good%'=N.x/(N.x+N.y))
return(df1)
}
}
source('tools//bar_plot.R')
load("data//data1.RData")
bar_plot(data1,"stage_count","y")
source('tools//bar_plot.R')
bar_plot(data1,"stage_count","y")
source('tools//bar.R')
bar(data1,"stage_count","y")
xgb.cv.plot=function(input,output,params){
history=input
train_history=history[,1:6]%>%mutate(id=row.names(history),class="train")
test_history=history[,7:12]%>%mutate(id=row.names(history),class="test")
colnames(train_history)=c("auc.mean","auc.std","rmse.mean","rmse.std","error.mean","error.std","id","class")
colnames(test_history)=c("auc.mean","auc.std","rmse.mean","rmse.std","error.mean","error.std","id","class")
his=rbind(train_history,test_history)
his$id=his$id%>%as.numeric
his$class=his$class%>%factor
if(output=="auc"){
auc=ggplot(data=his,aes(x=id, y=auc.mean,ymin=auc.mean-auc.std,ymax=auc.mean+auc.std,fill=class),linetype=class)+
geom_line()+
geom_ribbon(alpha=0.5)+
labs(x="nround",y=NULL,title = "XGB Cross Validation AUC")+
theme(title=element_text(size=15))+
theme_bw()
return(auc)
}
if(output=="rmse"){
rmse=ggplot(data=his,aes(x=id, y=rmse.mean,ymin=rmse.mean-rmse.std,ymax=rmse.mean+rmse.std,fill=class),linetype=class)+
geom_line()+
geom_ribbon(alpha=0.5)+
labs(x="nround",y=NULL,title = "XGB Cross Validation RMSE")+
theme(title=element_text(size=15))+
theme_bw()
return(rmse)
}
if(output=="error"){
error=ggplot(data=his,aes(x=id,y=error.mean,ymin=error.mean-error.std,ymax=error.mean+error.std,fill=class),linetype=class)+
geom_line()+
geom_ribbon(alpha=0.5)+
labs(x="nround",y=NULL,title = "XGB Cross Validation ERROR")+
theme(title=element_text(size=15))+
theme_bw()
return(error)
}
if(output=="ks"){
history=input
train_history=history[,1:2]%>%mutate(id=row.names(history),class="train")
test_history=history[,3:4]%>%mutate(id=row.names(history),class="test")
colnames(train_history)[1:2]=c("ks.mean","ks.std")
colnames(test_history)[1:2]=c("ks.mean","ks.std")
his=rbind(train_history,test_history)
his$id=his$id%>%as.numeric
his$class=his$class%>%factor
ggplot(data=his,aes(x=id, y=ks.mean,ymin=ks.mean-ks.std,ymax=ks.mean+ks.std,fill=class),linetype=class)+
geom_line()+
geom_ribbon(alpha=0.5)+
labs(x="nround",y=NULL,title = "XGB Cross Validation KS")+
theme(title=element_text(size=15))+
theme_bw()
}
}
xgb.cv.plot=function(input,output,params){
history=input
train_history=history[,1:6]%>%mutate(id=row.names(history),class="train")
test_history=history[,7:12]%>%mutate(id=row.names(history),class="test")
colnames(train_history)=c("auc.mean","auc.std","rmse.mean","rmse.std","error.mean","error.std","id","class")
colnames(test_history)=c("auc.mean","auc.std","rmse.mean","rmse.std","error.mean","error.std","id","class")
his=rbind(train_history,test_history)
his$id=his$id%>%as.numeric
his$class=his$class%>%factor
if(output=="auc"){
auc=ggplot(data=his,aes(x=id, y=auc.mean,ymin=auc.mean-auc.std,ymax=auc.mean+auc.std,fill=class),linetype=class)+
geom_line()+
geom_ribbon(alpha=0.5)+
labs(x="nround",y=NULL,title = "XGB Cross Validation AUC")+
theme(title=element_text(size=15))+
theme_bw()
return(auc)
}
if(output=="rmse"){
rmse=ggplot(data=his,aes(x=id, y=rmse.mean,ymin=rmse.mean-rmse.std,ymax=rmse.mean+rmse.std,fill=class),linetype=class)+
geom_line()+
geom_ribbon(alpha=0.5)+
labs(x="nround",y=NULL,title = "XGB Cross Validation RMSE")+
theme(title=element_text(size=15))+
theme_bw()
return(rmse)
}
if(output=="error"){
error=ggplot(data=his,aes(x=id,y=error.mean,ymin=error.mean-error.std,ymax=error.mean+error.std,fill=class),linetype=class)+
geom_line()+
geom_ribbon(alpha=0.5)+
labs(x="nround",y=NULL,title = "XGB Cross Validation ERROR")+
theme(title=element_text(size=15))+
theme_bw()
return(error)
}
if(output=="ks"){
history=input
train_history=history[,1:2]%>%mutate(id=row.names(history),class="train")
test_history=history[,3:4]%>%mutate(id=row.names(history),class="test")
colnames(train_history)[1:2]=c("ks.mean","ks.std")
colnames(test_history)[1:2]=c("ks.mean","ks.std")
his=rbind(train_history,test_history)
his$id=his$id%>%as.numeric
his$class=his$class%>%factor
ks=ggplot(data=his,aes(x=id, y=ks.mean,ymin=ks.mean-ks.std,ymax=ks.mean+ks.std,fill=class),linetype=class)+
geom_line()+
geom_ribbon(alpha=0.5)+
labs(x="nround",y=NULL,title = "XGB Cross Validation KS")+
theme(title=element_text(size=15))+
theme_bw()
return(ks)
}
}
load("data//history4.RData")
load("data//history4_ks.RData")
xgb.cv.plot=function(input,output){
history=input
train_history=history[,1:6]%>%mutate(id=row.names(history),class="train")
test_history=history[,7:12]%>%mutate(id=row.names(history),class="test")
colnames(train_history)=c("auc.mean","auc.std","rmse.mean","rmse.std","error.mean","error.std","id","class")
colnames(test_history)=c("auc.mean","auc.std","rmse.mean","rmse.std","error.mean","error.std","id","class")
his=rbind(train_history,test_history)
his$id=his$id%>%as.numeric
his$class=his$class%>%factor
if(output=="auc"){
auc=ggplot(data=his,aes(x=id, y=auc.mean,ymin=auc.mean-auc.std,ymax=auc.mean+auc.std,fill=class),linetype=class)+
geom_line()+
geom_ribbon(alpha=0.5)+
labs(x="nround",y=NULL,title = "XGB Cross Validation AUC")+
theme(title=element_text(size=15))+
theme_bw()
return(auc)
}
if(output=="rmse"){
rmse=ggplot(data=his,aes(x=id, y=rmse.mean,ymin=rmse.mean-rmse.std,ymax=rmse.mean+rmse.std,fill=class),linetype=class)+
geom_line()+
geom_ribbon(alpha=0.5)+
labs(x="nround",y=NULL,title = "XGB Cross Validation RMSE")+
theme(title=element_text(size=15))+
theme_bw()
return(rmse)
}
if(output=="error"){
error=ggplot(data=his,aes(x=id,y=error.mean,ymin=error.mean-error.std,ymax=error.mean+error.std,fill=class),linetype=class)+
geom_line()+
geom_ribbon(alpha=0.5)+
labs(x="nround",y=NULL,title = "XGB Cross Validation ERROR")+
theme(title=element_text(size=15))+
theme_bw()
return(error)
}
if(output=="ks"){
history=input
train_history=history[,1:2]%>%mutate(id=row.names(history),class="train")
test_history=history[,3:4]%>%mutate(id=row.names(history),class="test")
colnames(train_history)[1:2]=c("ks.mean","ks.std")
colnames(test_history)[1:2]=c("ks.mean","ks.std")
his=rbind(train_history,test_history)
his$id=his$id%>%as.numeric
his$class=his$class%>%factor
ks=ggplot(data=his,aes(x=id, y=ks.mean,ymin=ks.mean-ks.std,ymax=ks.mean+ks.std,fill=class),linetype=class)+
geom_line()+
geom_ribbon(alpha=0.5)+
labs(x="nround",y=NULL,title = "XGB Cross Validation KS")+
theme(title=element_text(size=15))+
theme_bw()
return(ks)
}
}
xgb.cv.plot(history4_ks,"ks")
history4_ks
xgb.cv.plot=function(input,output){
if(output!="ks"){
history=input
train_history=history[,1:6]%>%mutate(id=row.names(history),class="train")
test_history=history[,7:12]%>%mutate(id=row.names(history),class="test")
colnames(train_history)=c("auc.mean","auc.std","rmse.mean","rmse.std","error.mean","error.std","id","class")
colnames(test_history)=c("auc.mean","auc.std","rmse.mean","rmse.std","error.mean","error.std","id","class")
his=rbind(train_history,test_history)
his$id=his$id%>%as.numeric
his$class=his$class%>%factor
if(output=="auc"){
auc=ggplot(data=his,aes(x=id, y=auc.mean,ymin=auc.mean-auc.std,ymax=auc.mean+auc.std,fill=class),linetype=class)+
geom_line()+
geom_ribbon(alpha=0.5)+
labs(x="nround",y=NULL,title = "XGB Cross Validation AUC")+
theme(title=element_text(size=15))+
theme_bw()
return(auc)
}
if(output=="rmse"){
rmse=ggplot(data=his,aes(x=id, y=rmse.mean,ymin=rmse.mean-rmse.std,ymax=rmse.mean+rmse.std,fill=class),linetype=class)+
geom_line()+
geom_ribbon(alpha=0.5)+
labs(x="nround",y=NULL,title = "XGB Cross Validation RMSE")+
theme(title=element_text(size=15))+
theme_bw()
return(rmse)
}
if(output=="error"){
error=ggplot(data=his,aes(x=id,y=error.mean,ymin=error.mean-error.std,ymax=error.mean+error.std,fill=class),linetype=class)+
geom_line()+
geom_ribbon(alpha=0.5)+
labs(x="nround",y=NULL,title = "XGB Cross Validation ERROR")+
theme(title=element_text(size=15))+
theme_bw()
return(error)
}
}
else{
history=input
train_history=history[,1:2]%>%mutate(id=row.names(history),class="train")
test_history=history[,3:4]%>%mutate(id=row.names(history),class="test")
colnames(train_history)[1:2]=c("ks.mean","ks.std")
colnames(test_history)[1:2]=c("ks.mean","ks.std")
his=rbind(train_history,test_history)
his$id=his$id%>%as.numeric
his$class=his$class%>%factor
ks=ggplot(data=his,aes(x=id, y=ks.mean,ymin=ks.mean-ks.std,ymax=ks.mean+ks.std,fill=class),linetype=class)+
geom_line()+
geom_ribbon(alpha=0.5)+
labs(x="nround",y=NULL,title = "XGB Cross Validation KS")+
theme(title=element_text(size=15))+
theme_bw()
return(ks)
}
}
xgb.cv.plot(history4_ks,"ks")
source('tools//xgb.cv.plot.R')
na.plot=function(data){
missing=sapply(data,function(x)sum(is.na(x))/nrow(data0))
#missing=missing[order(missing,decreasing = T)]
nadata=missing[missing>0]
na_df=data.frame(var=names(nadata),na=nadata,row.names = NULL)
ggplot(na_df)+
geom_bar(aes(x=reorder(var,na),y=na),stat='identity', fill='red')+
labs(y='% Missing',x=NULL,title='Percent of Missing Data by Feature') +
coord_flip(ylim = c(0,1))
}
na.plot(data1)
na.plot=function(data){
missing=sapply(data,function(x)sum(is.na(x))/nrow(data))
#missing=missing[order(missing,decreasing = T)]
nadata=missing[missing>0]
na_df=data.frame(var=names(nadata),na=nadata,row.names = NULL)
ggplot(na_df)+
geom_bar(aes(x=reorder(var,na),y=na),stat='identity', fill='red')+
labs(y='% Missing',x=NULL,title='Percent of Missing Data by Feature') +
coord_flip(ylim = c(0,1))
}
na.plot(data10)
na.plot(data1)
load("data//data1.RData")
load("data//history.RData")
xgb.cv.plot(history,"auc")
xgb.cv.plot(history,"rmse")
require(corrplot)
require(psych)
require(Cairo)
library(tidyverse)
library(dplyr)
library(Information)
library(gridExtra)
library(plotROC)
library(stringr)
library(pROC)
library(DT)
library(xgboost)
library(data.table)
library(smbinning)
library(Information)
library(RColorBrewer)
load("data//data1.RData")
load("data//data1.RData")
var=data1$stage_count
y=data1$y
a=cbind(var,y)%>%data.table
df=a[,.N,by=.(var,y1)]
df=a[,.N,by=.(var,y)]
df
df[var==NA,]
df[var==NA,all]
df[var==NA,list(var,y,N)]
df['var'==NA,list(var,y,N)]
df['var'==NA]
df['var'==NA,]
df[is.na(var),]
df[is.na(var),var:=-99999]
df
df$var%>%class
df$var%>%class
df$var%>%class=="numeric"
bar=function(var,y,plot=T){
a=cbind(var,y)%>%data.table
df=a[,.N,by=.(var,y)]
df[is.na(var),var:=-99999]
if(df$var%>%class=="numeric"){
levels(df$var)=df$var%>%levels%>%as.numeric%>%sort
df=df[order(y1,var)]
}
levels(df$var)=sub(x=levels(df$var),"-99999","NA")
if(plot==T){
ggplot(df,aes(x=var,y=N,fill=factor(y1)))+
geom_bar(stat='identity')
}
else{
good=df[y1==0]
bad=df[y1==1]
df1=merge(good,bad,all=T,by='var')
df1=mutate(df1,'good%'=N.x/(N.x+N.y))
return(df1)
}
}
bar(data1$stage_count,data1$y)
bar=function(var,y,plot=T){
a=cbind(var,y)%>%data.table
df=a[,.N,by=.(var,y)]
df[is.na(var),var:=-99999]
if(df$var%>%class=="numeric"){
levels(df$var)=df$var%>%levels%>%as.numeric%>%sort
df=df[order(y,var)]
}
levels(df$var)=sub(x=levels(df$var),"-99999","NA")
if(plot==T){
ggplot(df,aes(x=var,y=N,fill=factor(y)))+
geom_bar(stat='identity')
}
else{
good=df[y==0]
bad=df[y==1]
df1=merge(good,bad,all=T,by='var')
df1=mutate(df1,'good%'=N.x/(N.x+N.y))
return(df1)
}
}
bar(data1$stage_count,data1$y)
a=cbind(var,y)%>%data.table
df=a[,.N,by=.(var,y)]
df[is.na(var),var:=-99999]
if(df$var%>%class=="numeric"){
levels(df$var)=df$var%>%levels%>%as.numeric%>%sort
df=df[order(y,var)]
}
df
levels(df$var)=sub(x=levels(df$var),"-99999","NA")
df
df$var=factor(df$var)
levels(df$var)=sub(x=levels(df$var),"-99999","NA")
df
ggplot(df,aes(x=var,y=N,fill=factor(y)))+
geom_bar(stat='identity')
bar=function(var,y,plot=T){
a=cbind(var,y)%>%data.table
df=a[,.N,by=.(var,y)]
df[is.na(var),var:=-99999]
if(df$var%>%class=="numeric"){
levels(df$var)=df$var%>%levels%>%as.numeric%>%sort
df=df[order(y,var)]
}
df$var=factor(df$var)
levels(df$var)=sub(x=levels(df$var),"-99999","NA")
if(plot==T){
ggplot(df,aes(x=var,y=N,fill=factor(y)))+
geom_bar(stat='identity')
}
else{
good=df[y==0]
bad=df[y==1]
df1=merge(good,bad,all=T,by='var')
df1=mutate(df1,'good%'=N.x/(N.x+N.y))
return(df1)
}
}
bar(data1$stage_count,data1$y)
na.plot(data1)
na.plot(data1)
